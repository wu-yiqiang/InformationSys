"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("@volar/shared");
const vscode_vue_languageservice_1 = require("@volar/vscode-vue-languageservice");
const configs_1 = require("../configs");
const instances_1 = require("../instances");
instances_1.connection.onCompletion(async (handler) => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.doComplete(document.uri, handler.position, handler.context, configs_1.getEmmetConfiguration);
});
instances_1.connection.onCompletionResolve(async (item) => {
    var _a, _b, _c;
    const uri = (_a = item.data) === null || _a === void 0 ? void 0 : _a.uri;
    if (!uri)
        return item;
    const activeSel = await instances_1.connection.sendRequest(shared_1.ActiveSelectionRequest.type);
    const newOffset = (activeSel === null || activeSel === void 0 ? void 0 : activeSel.uri.toLowerCase()) === uri.toLowerCase() ? activeSel === null || activeSel === void 0 ? void 0 : activeSel.offset : undefined;
    return (_c = (_b = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(uri)) === null || _b === void 0 ? void 0 : _b.doCompletionResolve(item, newOffset)) !== null && _c !== void 0 ? _c : item;
});
instances_1.connection.onHover(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.doHover(document.uri, handler.position);
});
instances_1.connection.onSignatureHelp(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.getSignatureHelp(document, handler.position);
});
instances_1.connection.onSelectionRanges(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.getSelectionRanges(document, handler.positions);
});
instances_1.connection.onPrepareRename(handler => {
    var _a;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(handler.textDocument.uri)) === null || _a === void 0 ? void 0 : _a.rename.onPrepare(handler.textDocument.uri, handler.position);
});
instances_1.connection.onRenameRequest(handler => {
    var _a;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(handler.textDocument.uri)) === null || _a === void 0 ? void 0 : _a.rename.doRename(handler.textDocument.uri, handler.position, handler.newName);
});
instances_1.connection.onCodeLens(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.getCodeLens(document);
});
instances_1.connection.onCodeLensResolve(codeLens => {
    var _a, _b, _c;
    if (!instances_1.servicesManager)
        return codeLens;
    const uri = (_a = codeLens.data) === null || _a === void 0 ? void 0 : _a.uri;
    return (_c = (_b = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(uri)) === null || _b === void 0 ? void 0 : _b.doCodeLensResolve(codeLens)) !== null && _c !== void 0 ? _c : codeLens;
});
instances_1.connection.onExecuteCommand(handler => {
    var _a, _b;
    const uri = (_a = handler.arguments) === null || _a === void 0 ? void 0 : _a[0];
    const document = instances_1.documents.get(uri);
    if (!document)
        return;
    return (_b = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(uri)) === null || _b === void 0 ? void 0 : _b.doExecuteCommand(document, handler.command, handler.arguments, instances_1.connection);
});
instances_1.connection.onCodeAction(handler => {
    var _a;
    const uri = handler.textDocument.uri;
    const tsConfig = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchTsConfig(uri);
    const service = tsConfig ? (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.services.get(tsConfig)) === null || _a === void 0 ? void 0 : _a.getLanguageService() : undefined;
    if (service) {
        const codeActions = service.getCodeActions(uri, handler.range, handler.context);
        for (const codeAction of codeActions) {
            if (codeAction.data && typeof codeAction.data === 'object') {
                codeAction.data.tsConfig = tsConfig;
            }
            else {
                codeAction.data = { tsConfig };
            }
        }
        return codeActions;
    }
});
instances_1.connection.onCodeActionResolve(codeAction => {
    var _a, _b;
    if (!instances_1.servicesManager)
        return codeAction;
    const tsConfig = (_a = codeAction.data) === null || _a === void 0 ? void 0 : _a.tsConfig;
    const service = tsConfig ? (_b = instances_1.servicesManager.services.get(tsConfig)) === null || _b === void 0 ? void 0 : _b.getLanguageService() : undefined;
    if (service) {
        return service.doCodeActionResolve(codeAction);
    }
    return codeAction;
});
instances_1.connection.onReferences(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.findReferences(document.uri, handler.position);
});
instances_1.connection.onDefinition(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.findDefinition(document.uri, handler.position);
});
instances_1.connection.onTypeDefinition(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.findTypeDefinition(document.uri, handler.position);
});
instances_1.connection.onDocumentColor(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.findDocumentColors(document);
});
instances_1.connection.onColorPresentation(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.getColorPresentations(document, handler.color, handler.range);
});
instances_1.connection.onDocumentHighlight(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.findDocumentHighlights(document, handler.position);
});
instances_1.connection.onDocumentSymbol(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.findDocumentSymbols(document);
});
instances_1.connection.onDocumentLinks(handler => {
    var _a;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.findDocumentLinks(document);
});
instances_1.connection.onDocumentFormatting(handler => {
    if (!instances_1.noStateLs)
        return;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return instances_1.noStateLs.doFormatting(document, handler.options);
});
instances_1.connection.onFoldingRanges(handler => {
    if (!instances_1.noStateLs)
        return;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return instances_1.noStateLs.getFoldingRanges(document);
});
instances_1.connection.languages.callHierarchy.onPrepare(handler => {
    var _a;
    if (!instances_1.servicesManager)
        return [];
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return [];
    const items = (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(document.uri)) === null || _a === void 0 ? void 0 : _a.callHierarchy.onPrepare(document, handler.position);
    return (items === null || items === void 0 ? void 0 : items.length) ? items : null;
});
instances_1.connection.languages.callHierarchy.onIncomingCalls(handler => {
    var _a, _b;
    if (!instances_1.servicesManager)
        return [];
    const { uri } = handler.item.data;
    return (_b = (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(uri)) === null || _a === void 0 ? void 0 : _a.callHierarchy.onIncomingCalls(handler.item)) !== null && _b !== void 0 ? _b : [];
});
instances_1.connection.languages.callHierarchy.onOutgoingCalls(handler => {
    var _a, _b;
    if (!instances_1.servicesManager)
        return [];
    const { uri } = handler.item.data;
    return (_b = (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(uri)) === null || _a === void 0 ? void 0 : _a.callHierarchy.onOutgoingCalls(handler.item)) !== null && _b !== void 0 ? _b : [];
});
instances_1.connection.languages.onLinkedEditingRange(handler => {
    if (!instances_1.noStateLs)
        return;
    const document = instances_1.documents.get(handler.textDocument.uri);
    if (!document)
        return;
    return instances_1.noStateLs.findLinkedEditingRanges(document, handler.position);
});
instances_1.connection.workspace.onWillRenameFiles(handler => {
    if (!instances_1.servicesManager)
        return null;
    const edits = handler.files
        .map(file => {
        var _a;
        return (_a = instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.getMatchService(file.oldUri)) === null || _a === void 0 ? void 0 : _a.rename.onRenameFile(file.oldUri, file.newUri);
    })
        .filter(shared_1.notEmpty);
    if (edits.length) {
        const result = edits[0];
        vscode_vue_languageservice_1.margeWorkspaceEdits(result, ...edits.slice(1));
        return result;
    }
    return null;
});
//# sourceMappingURL=lspFeatures.js.map