"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("@volar/shared");
const vscode_vue_languageservice_1 = require("@volar/vscode-vue-languageservice");
const node_1 = require("vscode-languageserver/node");
const configs_1 = require("./configs");
require("./features/customFeatures");
require("./features/lspFeatures");
const instances_1 = require("./instances");
const servicesManager_1 = require("./servicesManager");
let mode = 'api';
instances_1.connection.onInitialize(onInitialize);
instances_1.connection.onInitialized(onInitialized);
instances_1.connection.onDidChangeConfiguration(configs_1.updateConfigs);
instances_1.connection.listen();
instances_1.documents.listen(instances_1.connection);
function onInitialize(params) {
    const options = params.initializationOptions;
    const folders = params.workspaceFolders
        ? params.workspaceFolders
            .map(folder => folder.uri)
            .filter(uri => uri.startsWith('file:/'))
            .map(uri => shared_1.uriToFsPath(uri))
        : [];
    const result = {
        capabilities: {
            textDocumentSync: node_1.TextDocumentSyncKind.Incremental,
        }
    };
    mode = options.mode;
    if (options.mode === 'api') {
        result.capabilities.workspace = {
            fileOperations: {
                willRename: {
                    filters: [
                        { pattern: { glob: '**/*.vue' } },
                        { pattern: { glob: '**/*.js' } },
                        { pattern: { glob: '**/*.ts' } },
                        { pattern: { glob: '**/*.jsx' } },
                        { pattern: { glob: '**/*.tsx' } },
                        { pattern: { glob: '**/*.json' } },
                    ]
                }
            }
        };
    }
    if (options.mode === 'html') {
        instances_1.setNoStateLs(vscode_vue_languageservice_1.createNoStateLanguageService({ typescript: shared_1.loadVscodeTypescript(options.appRoot) }));
    }
    else if (options.mode === 'api') {
        instances_1.setServicesManager(servicesManager_1.createServicesManager(shared_1.loadVscodeTypescript(options.appRoot), shared_1.loadVscodeTypescriptLocalized(options.appRoot, options.language), instances_1.connection, instances_1.documents, folders));
    }
    else if (options.mode === 'doc') {
        instances_1.setServicesManager(servicesManager_1.createServicesManager(shared_1.loadVscodeTypescript(options.appRoot), shared_1.loadVscodeTypescriptLocalized(options.appRoot, options.language), instances_1.connection, instances_1.documents, folders, async (uri) => await instances_1.connection.sendRequest(shared_1.DocumentVersionRequest.type, { uri }), async () => await instances_1.connection.sendNotification(shared_1.SemanticTokensChangedNotification.type)));
    }
    return result;
}
function onInitialized() {
    switch (mode) {
        case 'api':
            Promise.resolve().then(() => require('./registers/registerApiFeatures'));
            break;
        case 'doc':
            Promise.resolve().then(() => require('./registers/registerDocumentFeatures'));
            break;
        case 'html':
            Promise.resolve().then(() => require('./registers/registerHtmlFeatures'));
            break;
    }
    instances_1.servicesManager === null || instances_1.servicesManager === void 0 ? void 0 : instances_1.servicesManager.onConnectionInited();
    instances_1.connection.client.register(node_1.DidChangeConfigurationNotification.type, undefined);
    configs_1.updateConfigs();
}
//# sourceMappingURL=server.js.map