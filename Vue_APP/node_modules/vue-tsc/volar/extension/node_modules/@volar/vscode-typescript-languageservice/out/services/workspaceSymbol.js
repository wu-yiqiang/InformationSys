"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const PConst = require("../protocol.const");
const node_1 = require("vscode-languageserver/node");
const modifiers_1 = require("../utils/modifiers");
const shared_1 = require("@volar/shared");
function getSymbolKind(item) {
    switch (item.kind) {
        case PConst.Kind.module: return node_1.SymbolKind.Module;
        case PConst.Kind.method: return node_1.SymbolKind.Method;
        case PConst.Kind.enum: return node_1.SymbolKind.Enum;
        case PConst.Kind.enumMember: return node_1.SymbolKind.EnumMember;
        case PConst.Kind.function: return node_1.SymbolKind.Function;
        case PConst.Kind.class: return node_1.SymbolKind.Class;
        case PConst.Kind.interface: return node_1.SymbolKind.Interface;
        case PConst.Kind.type: return node_1.SymbolKind.Class;
        case PConst.Kind.memberVariable: return node_1.SymbolKind.Field;
        case PConst.Kind.memberGetAccessor: return node_1.SymbolKind.Field;
        case PConst.Kind.memberSetAccessor: return node_1.SymbolKind.Field;
        case PConst.Kind.variable: return node_1.SymbolKind.Variable;
        default: return node_1.SymbolKind.Variable;
    }
}
function register(languageService, getTextDocument) {
    return (uri) => {
        const document = getTextDocument(uri);
        if (!document)
            return [];
        const fileName = shared_1.uriToFsPath(document.uri);
        const barItems = languageService.getNavigationBarItems(fileName);
        const output = [];
        barItemsWorker(document, barItems);
        return output;
        function barItemsWorker(document, barItems, parentName) {
            for (const barItem of barItems) {
                barItemWorker(document, barItem, parentName);
            }
        }
        function barItemWorker(document, barItem, parentName) {
            for (const span of barItem.spans) {
                const item = toSymbolInformation(document, barItem, span, parentName);
                output.push(item);
                barItemsWorker(document, barItem.childItems, barItem.text);
            }
        }
        function toSymbolInformation(document, item, span, containerName) {
            const label = getLabel(item);
            const info = node_1.SymbolInformation.create(label, getSymbolKind(item), node_1.Range.create(document.positionAt(span.start), document.positionAt(span.start + span.length)), document.uri, containerName);
            const kindModifiers = item.kindModifiers ? modifiers_1.parseKindModifier(item.kindModifiers) : undefined;
            if (kindModifiers === null || kindModifiers === void 0 ? void 0 : kindModifiers.has(PConst.KindModifiers.depreacted)) {
                info.deprecated = true;
            }
            return info;
        }
        function getLabel(item) {
            const label = item.text;
            if (item.kind === 'method' || item.kind === 'function') {
                return label + '()';
            }
            return label;
        }
    };
}
exports.register = register;
//# sourceMappingURL=workspaceSymbol.js.map