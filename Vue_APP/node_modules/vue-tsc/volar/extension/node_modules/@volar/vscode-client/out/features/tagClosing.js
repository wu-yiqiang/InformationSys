"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
const vscode = require("vscode");
const shared_1 = require("@volar/shared");
const vscode_1 = require("vscode");
async function activate(context, htmlClient, tsClient) {
    await htmlClient.onReady();
    context.subscriptions.push(activateTagClosing((document, position) => {
        let param = htmlClient.code2ProtocolConverter.asTextDocumentPositionParams(document, position);
        return htmlClient.sendRequest(shared_1.TagCloseRequest.type, param);
    }, { vue: true }, 'html.autoClosingTags', (rangeLength, lastCharacter) => rangeLength <= 0 && (lastCharacter === '>' || lastCharacter === '/')));
    context.subscriptions.push(activateTagClosing((document, position) => {
        let param = tsClient.code2ProtocolConverter.asTextDocumentPositionParams(document, position);
        return tsClient.sendRequest(shared_1.RefCloseRequest.type, param);
    }, {
        vue: true,
        javascript: true,
        typescript: true,
        javascriptreact: true,
        typescriptreact: true,
    }, 'volar.autoCompleteRefs', (_, lastCharacter, nextCharacter) => /\w/.test(lastCharacter) && !/\w/.test(nextCharacter)));
}
exports.activate = activate;
function activateTagClosing(tagProvider, supportedLanguages, configName, changeValid) {
    let disposables = [];
    vscode_1.workspace.onDidChangeTextDocument(event => onDidChangeTextDocument(event.document, event.contentChanges), null, disposables);
    let isEnabled = false;
    updateEnabledState();
    vscode_1.window.onDidChangeActiveTextEditor(updateEnabledState, null, disposables);
    let timeout = undefined;
    function updateEnabledState() {
        isEnabled = false;
        let editor = vscode_1.window.activeTextEditor;
        if (!editor) {
            return;
        }
        let document = editor.document;
        if (!supportedLanguages[document.languageId]) {
            return;
        }
        if (!vscode_1.workspace.getConfiguration(undefined, document.uri).get(configName)) {
            return;
        }
        isEnabled = true;
    }
    function onDidChangeTextDocument(document, changes) {
        if (!isEnabled) {
            return;
        }
        let activeDocument = vscode_1.window.activeTextEditor && vscode_1.window.activeTextEditor.document;
        if (document !== activeDocument || changes.length === 0) {
            return;
        }
        if (typeof timeout !== 'undefined') {
            clearTimeout(timeout);
        }
        let lastChange = changes[changes.length - 1];
        let lastCharacter = lastChange.text[lastChange.text.length - 1];
        if (lastCharacter === undefined) { // delete text
            return;
        }
        if (lastChange.text.indexOf('\n') >= 0) { // multi-line change
            return;
        }
        let rangeStart = lastChange.range.start;
        let version = document.version;
        let position = new vscode_1.Position(rangeStart.line, rangeStart.character + lastChange.text.length);
        let nextCharacter = document.getText(new vscode.Range(position, document.positionAt(document.offsetAt(position) + 1)));
        if (!changeValid(lastChange.rangeLength, lastCharacter, nextCharacter)) {
            return;
        }
        timeout = setTimeout(() => {
            tagProvider(document, position).then(text => {
                if (text && isEnabled) {
                    let activeEditor = vscode_1.window.activeTextEditor;
                    if (activeEditor) {
                        let activeDocument = activeEditor.document;
                        if (document === activeDocument && activeDocument.version === version) {
                            let selections = activeEditor.selections;
                            if (selections.length && selections.some(s => s.active.isEqual(position))) {
                                activeEditor.insertSnippet(new vscode_1.SnippetString(text), selections.map(s => s.active));
                            }
                            else {
                                activeEditor.insertSnippet(new vscode_1.SnippetString(text), position);
                            }
                        }
                    }
                }
            });
            timeout = undefined;
        }, 100);
    }
    return vscode_1.Disposable.from(...disposables);
}
//# sourceMappingURL=tagClosing.js.map