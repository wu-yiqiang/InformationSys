"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.userPick = exports.activate = void 0;
const vscode = require("vscode");
const shared_1 = require("@volar/shared");
async function activate(context, languageClient) {
    await languageClient.onReady();
    context.subscriptions.push(vscode.commands.registerCommand('volar.action.formatAllScripts', async () => {
        const useTabsOptions = new Map();
        useTabsOptions.set(true, 'Indent Using Tabs');
        useTabsOptions.set(false, 'Indent Using Spaces');
        const useTabs = await userPick(useTabsOptions);
        if (useTabs === undefined)
            return; // cancle
        const tabSizeOptions = new Map();
        for (let i = 1; i <= 8; i++) {
            tabSizeOptions.set(i, i.toString());
        }
        const tabSize = await userPick(tabSizeOptions, 'Select Tab Size');
        if (tabSize === undefined)
            return; // cancle
        languageClient.sendRequest(shared_1.FormatAllScriptsRequest.type, {
            insertSpaces: !useTabs,
            tabSize,
        });
    }));
}
exports.activate = activate;
function userPick(options, placeholder) {
    return new Promise(resolve => {
        const quickPick = vscode.window.createQuickPick();
        quickPick.items = [...options.values()].map(option => ({ label: option }));
        quickPick.placeholder = placeholder;
        quickPick.onDidChangeSelection(selection => {
            if (selection[0]) {
                for (const [key, label] of options) {
                    if (selection[0].label === label) {
                        resolve(key);
                        quickPick.hide();
                    }
                }
            }
        });
        quickPick.onDidHide(() => {
            quickPick.dispose();
            resolve(undefined);
        });
        quickPick.show();
    });
}
exports.userPick = userPick;
//# sourceMappingURL=formatAll.js.map