"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deactivate = exports.activate = void 0;
const path = require("upath");
const vscode = require("vscode");
const lsp = require("vscode-languageclient/node");
const splitEditors = require("./features/splitEditors");
const preview = require("./features/preview");
const callGraph = require("./features/callGraph");
const showReferences = require("./features/showReferences");
const documentVersion = require("./features/documentVersion");
const activeSelection = require("./features/activeSelection");
const formatAll = require("./features/formatAll");
const verifyAll = require("./features/verifyAll");
const virtualFiles = require("./features/virtualFiles");
const restart = require("./features/restart");
const tagClosing = require("./features/tagClosing");
const semanticTokens = require("./features/semanticTokens");
const tsPlugin = require("./features/tsPlugin");
const defaultLanguage = require("./features/defaultLanguage");
let apiClient;
let docClient;
let htmlClient;
async function activate(context) {
    apiClient = createLanguageService(context, 'api', 'volar-api', 'Volar - API', 6009, true);
    docClient = createLanguageService(context, 'doc', 'volar-document', 'Volar - Document', 6010, true);
    htmlClient = createLanguageService(context, 'html', 'volar-html', 'Volar - HTML', 6011, false);
    splitEditors.activate(context);
    preview.activate(context);
    callGraph.activate(context, apiClient);
    showReferences.activate(context, apiClient);
    formatAll.activate(context, apiClient);
    documentVersion.activate(context, docClient);
    activeSelection.activate(context, apiClient);
    verifyAll.activate(context, docClient);
    virtualFiles.activate(context, docClient);
    semanticTokens.activate(context, docClient);
    tagClosing.activate(context, htmlClient, apiClient);
    restart.activate(context, [apiClient, docClient]);
    tsPlugin.activate(context);
    defaultLanguage.activate();
    startEmbeddedLanguageServices();
}
exports.activate = activate;
function deactivate() {
    return (apiClient === null || apiClient === void 0 ? void 0 : apiClient.stop()) && (docClient === null || docClient === void 0 ? void 0 : docClient.stop()) && (htmlClient === null || htmlClient === void 0 ? void 0 : htmlClient.stop());
}
exports.deactivate = deactivate;
function createLanguageService(context, mode, id, name, port, fileOnly) {
    const serverModule = context.asAbsolutePath(path.join('node_modules', '@volar', 'vscode-server', 'out', 'server.js'));
    const debugOptions = { execArgv: ['--nolazy', '--inspect=' + port] };
    const serverOptions = {
        run: { module: serverModule, transport: lsp.TransportKind.ipc },
        debug: {
            module: serverModule,
            transport: lsp.TransportKind.ipc,
            options: debugOptions
        },
    };
    const serverInitOptions = {
        mode: mode,
        appRoot: vscode.env.appRoot,
        language: vscode.env.language,
    };
    const clientOptions = {
        documentSelector: fileOnly ?
            [
                { scheme: 'file', language: 'vue' },
                { scheme: 'file', language: 'javascript' },
                { scheme: 'file', language: 'typescript' },
                { scheme: 'file', language: 'javascriptreact' },
                { scheme: 'file', language: 'typescriptreact' },
            ] : [
            { language: 'vue' },
            { language: 'javascript' },
            { language: 'typescript' },
            { language: 'javascriptreact' },
            { language: 'typescriptreact' },
        ],
        initializationOptions: serverInitOptions,
    };
    const client = new lsp.LanguageClient(id, name, serverOptions, clientOptions);
    context.subscriptions.push(client.start());
    return client;
}
async function startEmbeddedLanguageServices() {
    const ts = vscode.extensions.getExtension('vscode.typescript-language-features');
    const css = vscode.extensions.getExtension('vscode.css-language-features');
    const html = vscode.extensions.getExtension('vscode.html-language-features');
    if (ts && !ts.isActive) {
        await ts.activate();
    }
    if (css && !css.isActive) {
        await css.activate();
    }
    if (html && !html.isActive) {
        await html.activate();
    }
    /* from html-language-features */
    const EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];
    vscode.languages.setLanguageConfiguration('vue', {
        indentationRules: {
            increaseIndentPattern: /<(?!\?|(?:area|base|br|col|frame|hr|html|img|input|link|meta|param)\b|[^>]*\/>)([-_\.A-Za-z0-9]+)(?=\s|>)\b[^>]*>(?!.*<\/\1>)|<!--(?!.*-->)|\{[^}"']*$/,
            decreaseIndentPattern: /^\s*(<\/(?!html)[-_\.A-Za-z0-9]+\b[^>]*>|-->|\})/
        },
        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
        onEnterRules: [
            {
                beforeText: new RegExp(`<(?!(?:${EMPTY_ELEMENTS.join('|')}))([_:\\w][_:\\w-.\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),
                afterText: /^<\/([_:\w][_:\w-.\d]*)\s*>/i,
                action: { indentAction: vscode.IndentAction.IndentOutdent }
            },
            {
                beforeText: new RegExp(`<(?!(?:${EMPTY_ELEMENTS.join('|')}))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),
                action: { indentAction: vscode.IndentAction.Indent }
            }
        ],
    });
    vscode.languages.setLanguageConfiguration('jade', {
        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
    });
}
//# sourceMappingURL=extension.js.map