"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
const code_gen_1 = require("@volar/code-gen");
const shared_1 = require("@vue/shared");
const SourceMaps = require("../utils/sourceMaps");
function generate(script, scriptSetup, scriptSetupAst, htmlGen) {
    if (!scriptSetup)
        return;
    const codeGen = code_gen_1.createCodeGen();
    writeScript();
    writeScriptSetup();
    writeTemplate();
    codeGen.addText('\n;export { };\n');
    return codeGen;
    function writeScript() {
        if (!script)
            return;
        codeGen.addCode(script.content, { start: 0, end: script.content.length }, SourceMaps.Mode.Offset, {
            vueTag: 'script',
            capabilities: {
                diagnostic: true,
            },
        });
        codeGen.addText('\n');
    }
    function writeScriptSetup() {
        var _a;
        if (!scriptSetup)
            return;
        if (!scriptSetupAst)
            return;
        let noDollarCode = scriptSetup.content;
        for (const dollar of scriptSetupAst.dollars) {
            noDollarCode = noDollarCode.substring(0, dollar) + ' ' + noDollarCode.substring(dollar + 1); // replace '$'
        }
        for (const label of scriptSetupAst.labels) {
            noDollarCode = noDollarCode.substring(0, label.label.start) + 'let' + noDollarCode.substring(label.label.end).replace(':', ' '); // replace 'ref:'
            if (label.binarys.length) {
                const start = label.binarys[0];
                const end = label.binarys[label.binarys.length - 1];
                if (start.parent.start !== start.left.start) {
                    noDollarCode = noDollarCode.substring(0, start.parent.start) + ' '.repeat(start.left.start - start.parent.start) + noDollarCode.substring(start.left.start); // replace '('
                }
                const endOffset = ((_a = end.right) !== null && _a !== void 0 ? _a : end.left).end;
                if (end.parent.end !== endOffset) {
                    noDollarCode = noDollarCode.substring(0, endOffset) + ' '.repeat(end.parent.end - endOffset) + noDollarCode.substring(end.parent.end); // replace ')'
                }
            }
        }
        codeGen.addCode(noDollarCode, { start: 0, end: noDollarCode.length }, SourceMaps.Mode.Offset, {
            vueTag: 'scriptSetup',
            capabilities: {
                diagnostic: true,
            },
        });
    }
    function writeTemplate() {
        if (!scriptSetupAst)
            return;
        if (!htmlGen)
            return;
        const varNames = scriptSetupAst.returnVarNames.map(range => { var _a; return (_a = scriptSetup === null || scriptSetup === void 0 ? void 0 : scriptSetup.content.substring(range.start, range.end)) !== null && _a !== void 0 ? _a : ''; });
        codeGen.addText('{\n');
        for (const varName of varNames) {
            if (htmlGen.tags.has(varName) || htmlGen.tags.has(shared_1.hyphenate(varName))) {
                // fix import components unused report
                codeGen.addText(varName + ';\n');
            }
        }
        codeGen.addText(htmlGen.text);
        codeGen.addText('}\n');
    }
}
exports.generate = generate;
//# sourceMappingURL=script_suggestion.js.map