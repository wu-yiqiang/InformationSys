"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared_1 = require("@volar/shared");
function register({ mapper, tsLanguageService, ts }) {
    return {
        getRootFileNames,
        emit,
        getSyntacticDiagnostics,
        getSemanticDiagnostics,
        getGlobalDiagnostics,
    };
    function getRootFileNames() {
        const program = getOriginalProgram();
        return program.getRootFileNames()
            .filter(fileName => { var _a, _b; return (_b = (_a = tsLanguageService.host).fileExists) === null || _b === void 0 ? void 0 : _b.call(_a, fileName); });
    }
    function getSyntacticDiagnostics(sourceFile, cancellationToken) {
        const program = getOriginalProgram();
        const result = program.getSyntacticDiagnostics(sourceFile, cancellationToken);
        return transformDiagnostics(result);
    }
    function getSemanticDiagnostics(sourceFile, cancellationToken) {
        const program = getOriginalProgram();
        const result = program.getSemanticDiagnostics(sourceFile, cancellationToken);
        return transformDiagnostics(result);
    }
    function getGlobalDiagnostics(cancellationToken) {
        const program = getOriginalProgram();
        const result = program.getGlobalDiagnostics(cancellationToken);
        return transformDiagnostics(result);
    }
    function emit(targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers) {
        const program = getOriginalProgram();
        const result = program.emit(targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers);
        return {
            ...result,
            diagnostics: transformDiagnostics(result.diagnostics),
        };
    }
    function getOriginalProgram() {
        const program = tsLanguageService.raw.getProgram();
        if (!program)
            throw '!program';
        return program;
    }
    // transform
    function transformDiagnostics(diagnostics) {
        var _a, _b, _c, _d, _e;
        const result = [];
        for (const diagnostic of diagnostics) {
            if (diagnostic.file !== undefined
                && diagnostic.start !== undefined
                && diagnostic.length !== undefined) {
                const fileName = shared_1.normalizeFileName((_c = (_b = (_a = tsLanguageService.host).realpath) === null || _b === void 0 ? void 0 : _b.call(_a, diagnostic.file.fileName)) !== null && _c !== void 0 ? _c : diagnostic.file.fileName);
                for (const tsOrVueRange of mapper.ts.from2(fileName, diagnostic.start, diagnostic.start + diagnostic.length)) {
                    if (!((_e = (_d = tsLanguageService.host).fileExists) === null || _e === void 0 ? void 0 : _e.call(_d, tsOrVueRange.fileName)))
                        continue;
                    if (!tsOrVueRange.data || tsOrVueRange.data.capabilities.diagnostic) {
                        const file = tsOrVueRange.fileName === fileName
                            ? diagnostic.file
                            : ts.createSourceFile(tsOrVueRange.fileName, tsOrVueRange.textDocument.getText(), ts.ScriptTarget.JSON);
                        const newDiagnostic = {
                            ...diagnostic,
                            file,
                            start: tsOrVueRange.start,
                            length: tsOrVueRange.end - tsOrVueRange.start,
                        };
                        const relatedInformation = diagnostic.relatedInformation;
                        if (relatedInformation) {
                            newDiagnostic.relatedInformation = transformDiagnostics(relatedInformation);
                        }
                        result.push(newDiagnostic);
                    }
                }
            }
            else if (diagnostic.file === undefined) {
                result.push(diagnostic);
            }
        }
        return result;
    }
}
exports.register = register;
//# sourceMappingURL=tsProgramApis.js.map