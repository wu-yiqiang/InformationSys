"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.options = void 0;
const commands_1 = require("../commands");
exports.options = {
    references: true,
    pugTool: true,
    scriptSetupTool: true,
};
function register({ sourceFiles }) {
    return (document) => {
        const sourceFile = sourceFiles.get(document.uri);
        if (!sourceFile)
            return;
        let result = [];
        if (exports.options.references) {
            result = result.concat(getTsResult(sourceFile));
        }
        if (exports.options.pugTool) {
            result = result.concat(getHtmlResult(sourceFile));
            result = result.concat(getPugResult(sourceFile));
        }
        if (exports.options.scriptSetupTool) {
            result = result.concat(getScriptSetupResult(sourceFile));
        }
        return result;
        function getTsResult(sourceFile) {
            const result = [];
            for (const sourceMap of sourceFile.getTsSourceMaps()) {
                for (const maped of sourceMap) {
                    if (!maped.data.capabilities.referencesCodeLens)
                        continue;
                    const codeLens = {
                        range: {
                            start: document.positionAt(maped.sourceRange.start),
                            end: document.positionAt(maped.sourceRange.end),
                        },
                        data: {
                            uri: document.uri,
                            offset: maped.sourceRange.start,
                            tsUri: sourceMap.mappedDocument.uri,
                            tsOffset: maped.mappedRange.start,
                        },
                    };
                    result.push(codeLens);
                }
            }
            return result;
        }
        function getScriptSetupResult(sourceFile) {
            const result = [];
            const descriptor = sourceFile.getDescriptor();
            const data = sourceFile.getScriptSetupData();
            if (descriptor.scriptSetup && data) {
                result.push({
                    range: {
                        start: document.positionAt(descriptor.scriptSetup.loc.start),
                        end: document.positionAt(descriptor.scriptSetup.loc.end),
                    },
                    command: {
                        title: 'ref sugar ' + (data.labels.length ? '☑' : '☐'),
                        command: commands_1.Commands.SWITCH_REF_SUGAR,
                        arguments: [document.uri],
                    },
                });
            }
            return result;
        }
        function getHtmlResult(sourceFile) {
            const sourceMaps = sourceFile.getHtmlSourceMaps();
            for (const sourceMap of sourceMaps) {
                for (const maped of sourceMap) {
                    return getPugHtmlConvertCodeLens('html', {
                        start: sourceMap.sourceDocument.positionAt(maped.sourceRange.start),
                        end: sourceMap.sourceDocument.positionAt(maped.sourceRange.start),
                    });
                }
            }
            return [];
        }
        function getPugResult(sourceFile) {
            const sourceMaps = sourceFile.getPugSourceMaps();
            for (const sourceMap of sourceMaps) {
                for (const maped of sourceMap) {
                    return getPugHtmlConvertCodeLens('pug', {
                        start: sourceMap.sourceDocument.positionAt(maped.sourceRange.start),
                        end: sourceMap.sourceDocument.positionAt(maped.sourceRange.start),
                    });
                }
            }
            return [];
        }
        function getPugHtmlConvertCodeLens(current, range) {
            const result = [];
            result.push({
                range,
                command: {
                    title: 'pug ' + (current === 'pug' ? '☑' : '☐'),
                    command: current === 'pug' ? commands_1.Commands.PUG_TO_HTML : commands_1.Commands.HTML_TO_PUG,
                    arguments: [document.uri],
                },
            });
            return result;
        }
    };
}
exports.register = register;
//# sourceMappingURL=codeLens.js.map