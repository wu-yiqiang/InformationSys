"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const node_1 = require("vscode-languageserver/node");
const jsonc = require("jsonc-parser");
const shared_1 = require("@volar/shared");
const upath = require("upath");
const shared_2 = require("@volar/shared");
const languageServices = require("../utils/languageServices");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
function register({ ts, sourceFiles, vueHost }) {
    return (document) => {
        const sourceFile = sourceFiles.get(document.uri);
        if (!sourceFile)
            return;
        const compilerHost = ts.createCompilerHost(vueHost.getCompilationSettings());
        const documentContext = {
            resolveReference: (ref, base) => {
                return resolvePath(ref, base);
            },
        };
        const tsResult = getTsResult(sourceFile);
        const tsResult2 = getTsResult2(sourceFile);
        const htmlResult = getHtmlResult(sourceFile);
        const cssResult = getCssResult(sourceFile);
        return [
            ...cssResult,
            ...htmlResult,
            ...tsResult,
            ...tsResult2,
        ];
        function getTsResult(sourceFile) {
            let result = [];
            for (const sourceMap of sourceFile.getTsSourceMaps()) {
                // TODO: move to vscode-typescript-languageservice
                const scriptContent = sourceMap.mappedDocument.getText();
                const root = jsonc.parseTree(scriptContent);
                if (!root)
                    continue;
                const scriptDoc = vscode_languageserver_textdocument_1.TextDocument.create(document.uri, 'typescript', 0, scriptContent);
                result = result.concat([
                    getExtendsLink(scriptDoc, root),
                    ...getFilesLinks(scriptDoc, root),
                    ...getReferencesLinks(scriptDoc, root)
                ].filter(shared_2.notEmpty));
            }
            return result;
            function getExtendsLink(document, root) {
                const extendsNode = jsonc.findNodeAtLocation(root, ['extends']);
                if (!isPathValue(extendsNode)) {
                    return undefined;
                }
                if (extendsNode.value.startsWith('.')) {
                    return node_1.DocumentLink.create(getRange(document, extendsNode), shared_1.fsPathToUri(upath.join(upath.dirname(shared_1.uriToFsPath(document.uri)), extendsNode.value + (extendsNode.value.endsWith('.json') ? '' : '.json'))));
                }
                const workspaceFolderPath = vueHost.getCurrentDirectory();
                return node_1.DocumentLink.create(getRange(document, extendsNode), shared_1.fsPathToUri(upath.join(workspaceFolderPath, 'node_modules', extendsNode.value + (extendsNode.value.endsWith('.json') ? '' : '.json'))));
            }
            function getFilesLinks(document, root) {
                return mapChildren(jsonc.findNodeAtLocation(root, ['files']), child => pathNodeToLink(document, child));
            }
            function getReferencesLinks(document, root) {
                return mapChildren(jsonc.findNodeAtLocation(root, ['references']), child => {
                    const pathNode = jsonc.findNodeAtLocation(child, ['path']);
                    if (!isPathValue(pathNode)) {
                        return undefined;
                    }
                    return node_1.DocumentLink.create(getRange(document, pathNode), upath.basename(pathNode.value).endsWith('.json')
                        ? getFileTarget(document, pathNode)
                        : getFolderTarget(document, pathNode));
                });
            }
            function pathNodeToLink(document, node) {
                return isPathValue(node)
                    ? node_1.DocumentLink.create(getRange(document, node), getFileTarget(document, node))
                    : undefined;
            }
            function isPathValue(extendsNode) {
                return extendsNode
                    && extendsNode.type === 'string'
                    && extendsNode.value
                    && !extendsNode.value.includes('*'); // don't treat globs as links.
            }
            function getFileTarget(document, node) {
                return shared_1.fsPathToUri(upath.join(upath.dirname(shared_1.uriToFsPath(document.uri)), node.value));
            }
            function getFolderTarget(document, node) {
                return shared_1.fsPathToUri(upath.join(upath.dirname(shared_1.uriToFsPath(document.uri)), node.value, 'tsconfig.json'));
            }
            function getRange(document, node) {
                const offset = node.offset;
                const start = document.positionAt(offset + 1);
                const end = document.positionAt(offset + (node.length - 1));
                return node_1.Range.create(start, end);
            }
            function mapChildren(node, f) {
                return node && node.type === 'array' && node.children
                    ? node.children.map(f)
                    : [];
            }
        }
        function getTsResult2(sourceFile) {
            const result = [];
            for (const sourceMap of sourceFile.getTsSourceMaps()) {
                for (const maped of sourceMap) {
                    if (!maped.data.capabilities.displayWithLink) {
                        continue;
                    }
                    result.push({
                        range: {
                            start: document.positionAt(maped.sourceRange.start),
                            end: document.positionAt(maped.sourceRange.end),
                        },
                        target: document.uri, // TODO
                    });
                }
            }
            return result;
        }
        function getHtmlResult(sourceFile) {
            const result = [];
            for (const sourceMap of [...sourceFile.getHtmlSourceMaps(), ...sourceFile.getPugSourceMaps()]) {
                const links = sourceMap.language === 'html'
                    ? languageServices.html.findDocumentLinks(sourceMap.mappedDocument, documentContext)
                    : languageServices.pug.findDocumentLinks(sourceMap.pugDocument, documentContext);
                for (const link of links) {
                    const vueRange = sourceMap.getSourceRange(link.range.start, link.range.end);
                    if (vueRange) {
                        result.push({
                            ...link,
                            range: vueRange,
                        });
                    }
                }
            }
            return result;
        }
        function getCssResult(sourceFile) {
            const sourceMaps = sourceFile.getCssSourceMaps();
            const result = [];
            for (const sourceMap of sourceMaps) {
                const cssLanguageService = languageServices.getCssLanguageService(sourceMap.mappedDocument.languageId);
                if (!cssLanguageService || !sourceMap.stylesheet)
                    continue;
                const links = cssLanguageService.findDocumentLinks(sourceMap.mappedDocument, sourceMap.stylesheet, documentContext);
                for (const link of links) {
                    const vueRange = sourceMap.getSourceRange(link.range.start, link.range.end);
                    if (vueRange) {
                        result.push({
                            ...link,
                            range: vueRange,
                        });
                    }
                }
            }
            return result;
        }
        function resolvePath(ref, base) {
            const resolveResult = ts.resolveModuleName(ref, base, vueHost.getCompilationSettings(), compilerHost);
            const failedLookupLocations = resolveResult.failedLookupLocations;
            for (const failed of failedLookupLocations) {
                let path = failed;
                if (path.endsWith('.d.ts')) {
                    path = upath.trimExt(path);
                    path = upath.trimExt(path);
                }
                else {
                    path = upath.trimExt(path);
                }
                if (ts.sys.fileExists(shared_1.uriToFsPath(path))) {
                    return path;
                }
            }
            return ref;
        }
    };
}
exports.register = register;
//# sourceMappingURL=documentLinks.js.map