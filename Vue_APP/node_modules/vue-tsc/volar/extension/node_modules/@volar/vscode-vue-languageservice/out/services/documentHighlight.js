"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const languageServices = require("../utils/languageServices");
function register({ sourceFiles, tsLanguageService }) {
    return (document, position) => {
        const sourceFile = sourceFiles.get(document.uri);
        if (!sourceFile)
            return;
        const htmlResult = getHtmlResult(sourceFile);
        if (htmlResult.length)
            return htmlResult;
        const cssResult = getCssResult(sourceFile);
        if (cssResult.length)
            return cssResult;
        const tsResult = getTsResult(sourceFile);
        if (tsResult.length)
            return tsResult;
        function getTsResult(sourceFile) {
            const result = [];
            for (const sourceMap of sourceFile.getTsSourceMaps()) {
                for (const tsRange of sourceMap.getMappedRanges(position)) {
                    if (!tsRange.data.capabilities.basic)
                        continue;
                    const highlights = tsLanguageService.findDocumentHighlights(sourceMap.mappedDocument.uri, tsRange.start);
                    for (const highlight of highlights) {
                        const vueRange = sourceMap.getSourceRange(highlight.range.start, highlight.range.end);
                        if (vueRange) {
                            result.push({
                                ...highlight,
                                range: vueRange,
                            });
                        }
                    }
                }
            }
            return result;
        }
        function getHtmlResult(sourceFile) {
            const result = [];
            for (const sourceMap of [...sourceFile.getHtmlSourceMaps(), ...sourceFile.getPugSourceMaps()]) {
                for (const htmlRange of sourceMap.getMappedRanges(position)) {
                    const highlights = sourceMap.language === 'html'
                        ? languageServices.html.findDocumentHighlights(sourceMap.mappedDocument, htmlRange.start, sourceMap.htmlDocument)
                        : languageServices.pug.findDocumentHighlights(sourceMap.pugDocument, htmlRange.start);
                    if (!highlights)
                        continue;
                    for (const highlight of highlights) {
                        const vueRange = sourceMap.getSourceRange(highlight.range.start, highlight.range.end);
                        if (vueRange) {
                            result.push({
                                ...highlight,
                                range: vueRange,
                            });
                        }
                    }
                }
            }
            return result;
        }
        function getCssResult(sourceFile) {
            const result = [];
            for (const sourceMap of sourceFile.getCssSourceMaps()) {
                const cssLanguageService = languageServices.getCssLanguageService(sourceMap.mappedDocument.languageId);
                if (!cssLanguageService || !sourceMap.stylesheet)
                    continue;
                for (const cssRange of sourceMap.getMappedRanges(position)) {
                    const highlights = cssLanguageService.findDocumentHighlights(sourceMap.mappedDocument, cssRange.start, sourceMap.stylesheet);
                    for (const highlight of highlights) {
                        const vueRange = sourceMap.getSourceRange(highlight.range.start, highlight.range.end);
                        if (vueRange) {
                            result.push({
                                ...highlight,
                                range: vueRange,
                            });
                        }
                    }
                }
            }
            return result;
        }
    };
}
exports.register = register;
//# sourceMappingURL=documentHighlight.js.map