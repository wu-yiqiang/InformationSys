"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useScriptMain = void 0;
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const reactivity_1 = require("@vue/reactivity");
const SourceMaps = require("../utils/sourceMaps");
const upath = require("upath");
const string_1 = require("../utils/string");
const shared_1 = require("@volar/shared");
function useScriptMain(getUnreactiveDoc, script, scriptSetup, template) {
    let version = 0;
    const textDocument = reactivity_1.computed(() => {
        const vueDoc = getUnreactiveDoc();
        const uri = `${vueDoc.uri}.ts`;
        const vueFileName = upath.basename(shared_1.uriToFsPath(vueDoc.uri));
        let content = '';
        if (scriptSetup.value || script.value) {
            content += `import { __VLS_options } from './${vueFileName}.__VLS_script';\n`;
            content += `export { __VLS_options } from './${vueFileName}.__VLS_script';\n`;
            content += `export * from './${vueFileName}.__VLS_script';\n`;
        }
        if (scriptSetup.value) {
            content += `import { __VLS_component } from './${vueFileName}.__VLS_script';\n`;
        }
        else if (script.value) {
            content += `import __VLS_componentRaw from './${vueFileName}.__VLS_script';\n`;
            content += `var __VLS_componentReserve = __VLS_defineComponent(__VLS_options);\n`;
            content += `type __VLS_ComponentType<T> = T extends new (...args: any) => any ? T : typeof __VLS_componentReserve;\n`;
            content += `export declare var __VLS_component: __VLS_ComponentType<typeof __VLS_componentRaw>;\n`;
        }
        else {
            content += `export var __VLS_options = {};\n`;
            content += `export var __VLS_component = __VLS_defineComponent({});\n`;
        }
        content += `declare var __VLS_ctx: InstanceType<typeof __VLS_component>;\n`;
        content += `declare var __VLS_ComponentsWrap: typeof __VLS_options & { components: { } };\n`;
        content += `declare var __VLS_Components: typeof __VLS_ComponentsWrap.components & __VLS_GlobalComponents & __VLS_PickComponents<typeof __VLS_ctx>;\n`;
        content += `__VLS_ctx.${string_1.SearchTexts.Context};\n`;
        content += `__VLS_Components.${string_1.SearchTexts.Components};\n`;
        content += `__VLS_options.setup().${string_1.SearchTexts.SetupReturns};\n`;
        content += `__VLS_options.props.${string_1.SearchTexts.Props};\n`;
        content += `({} as JSX.IntrinsicElements).${string_1.SearchTexts.HtmlElements};\n`;
        content += `\n`;
        content += `export default {} as typeof __VLS_component & {\n`;
        content += `__VLS_raw: typeof __VLS_component\n`;
        content += `__VLS_options: typeof __VLS_options,\n`;
        content += template.value ? `__VLS_slots: typeof import ('./${vueFileName}.__VLS_template').default,` : `// no template\n`;
        content += `};\n`;
        return vscode_languageserver_textdocument_1.TextDocument.create(uri, 'typescript', version++, content);
    });
    const sourceMap = reactivity_1.computed(() => {
        var _a, _b, _c, _d, _e, _f;
        if (textDocument.value) {
            const vueDoc = getUnreactiveDoc();
            const docText = textDocument.value.getText();
            const sourceMap = new SourceMaps.TsSourceMap(vueDoc, textDocument.value, false, {
                foldingRanges: false,
                formatting: false,
                documentSymbol: false,
                codeActions: false,
                organizeImports: false,
            });
            sourceMap.add({
                data: {
                    vueTag: 'script',
                    capabilities: {},
                },
                mode: SourceMaps.Mode.Expand,
                sourceRange: {
                    start: (_c = (_b = ((_a = scriptSetup.value) !== null && _a !== void 0 ? _a : script.value)) === null || _b === void 0 ? void 0 : _b.loc.start) !== null && _c !== void 0 ? _c : 0,
                    end: (_f = (_e = ((_d = scriptSetup.value) !== null && _d !== void 0 ? _d : script.value)) === null || _e === void 0 ? void 0 : _e.loc.end) !== null && _f !== void 0 ? _f : 0,
                },
                mappedRange: {
                    start: 0,
                    end: docText.length,
                },
            });
            return sourceMap;
        }
    });
    return {
        textDocument,
        sourceMap,
    };
}
exports.useScriptMain = useScriptMain;
//# sourceMappingURL=main.js.map