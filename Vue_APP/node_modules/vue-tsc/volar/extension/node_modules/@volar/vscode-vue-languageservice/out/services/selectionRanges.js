"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const languageServices = require("../utils/languageServices");
function register({ sourceFiles, tsLanguageService }) {
    return (document, positions) => {
        const sourceFile = sourceFiles.get(document.uri);
        if (!sourceFile)
            return;
        const tsResult = getTsResult(sourceFile);
        const htmlResult = getHtmlResult(sourceFile);
        const cssResult = getCssResult(sourceFile);
        return [...cssResult, ...htmlResult, ...tsResult];
        function getTsResult(sourceFile) {
            let result = [];
            for (const position of positions) {
                for (const sourceMap of sourceFile.getTsSourceMaps()) {
                    for (const tsRange of sourceMap.getMappedRanges(position)) {
                        if (!tsRange.data.capabilities.basic)
                            continue;
                        const selectRange = tsLanguageService.getSelectionRange(sourceMap.mappedDocument.uri, tsRange.start);
                        if (selectRange) {
                            const vueRange = sourceMap.getSourceRange(selectRange.range.start, selectRange.range.end);
                            if (vueRange) {
                                result.push({
                                    range: vueRange,
                                    // TODO: parent
                                });
                            }
                        }
                    }
                }
            }
            return result;
        }
        function getHtmlResult(sourceFile) {
            let result = [];
            for (const position of positions) {
                for (const sourceMap of [...sourceFile.getHtmlSourceMaps(), ...sourceFile.getPugSourceMaps()]) {
                    for (const htmlRange of sourceMap.getMappedRanges(position)) {
                        const selectRanges = sourceMap.language === 'html'
                            ? languageServices.html.getSelectionRanges(sourceMap.mappedDocument, [htmlRange.start])
                            : languageServices.pug.getSelectionRanges(sourceMap.pugDocument, [htmlRange.start]);
                        for (const selectRange of selectRanges) {
                            const vueRange = sourceMap.getSourceRange(selectRange.range.start, selectRange.range.end);
                            if (vueRange) {
                                result.push({
                                    range: vueRange,
                                    // TODO: parent
                                });
                            }
                        }
                    }
                }
            }
            return result;
        }
        function getCssResult(sourceFile) {
            let result = [];
            for (const position of positions) {
                for (const sourceMap of sourceFile.getCssSourceMaps()) {
                    const cssLanguageService = languageServices.getCssLanguageService(sourceMap.mappedDocument.languageId);
                    if (!cssLanguageService || !sourceMap.stylesheet)
                        continue;
                    for (const cssRange of sourceMap.getMappedRanges(position)) {
                        const selectRanges = cssLanguageService.getSelectionRanges(sourceMap.mappedDocument, [cssRange.start], sourceMap.stylesheet);
                        for (const selectRange of selectRanges) {
                            const vueRange = sourceMap.getSourceRange(selectRange.range.start, selectRange.range.end);
                            if (vueRange) {
                                result.push({
                                    range: vueRange,
                                    // TODO: parent
                                });
                            }
                        }
                    }
                }
            }
            return result;
        }
    };
}
exports.register = register;
//# sourceMappingURL=selectionRanges.js.map