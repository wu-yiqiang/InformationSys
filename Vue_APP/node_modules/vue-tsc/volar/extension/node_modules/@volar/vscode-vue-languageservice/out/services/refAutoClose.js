"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const node_1 = require("vscode-languageserver/node");
function register({ mapper }) {
    return (document, position) => {
        for (const tsRange of mapper.ts.to(document.uri, position)) {
            if (!tsRange.data.capabilities.completion)
                continue;
            const defs = tsRange.languageService.findDefinition(tsRange.textDocument.uri, tsRange.start);
            let isDef = false;
            for (const def of defs) {
                const uri = node_1.Location.is(def) ? def.uri : def.targetUri;
                const range = node_1.Location.is(def) ? def.range : def.targetSelectionRange;
                if (uri === tsRange.textDocument.uri
                    && range.end.line === tsRange.start.line
                    && range.end.character === tsRange.start.character) {
                    isDef = true;
                    break;
                }
            }
            if (isDef)
                continue;
            const typeDefs = tsRange.languageService.findTypeDefinition(tsRange.textDocument.uri, tsRange.start);
            for (const typeDefine of typeDefs) {
                const uri = node_1.Location.is(typeDefine) ? typeDefine.uri : typeDefine.targetUri;
                const range = node_1.Location.is(typeDefine) ? typeDefine.range : typeDefine.targetSelectionRange;
                const defineDoc = tsRange.languageService.getTextDocument(uri);
                if (!defineDoc)
                    continue;
                const typeName = defineDoc.getText(range);
                if (uri.endsWith('reactivity.d.ts')) {
                    switch (typeName) {
                        case 'Ref':
                        case 'ComputedRef':
                        case 'WritableComputedRef':
                            return '.value';
                    }
                }
            }
        }
    };
}
exports.register = register;
//# sourceMappingURL=refAutoClose.js.map