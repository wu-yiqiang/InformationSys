"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCheapTsService2 = exports.getCheapTsService = exports.getCssLanguageService = exports.postcss = exports.pug = exports.less = exports.scss = exports.css = exports.html = void 0;
const CSS = require("vscode-css-languageservice");
const HTML = require("vscode-html-languageservice");
const Pug = require("@volar/vscode-pug-languageservice");
const TS2 = require("@volar/vscode-typescript-languageservice");
const shared_1 = require("@volar/shared");
exports.html = HTML.getLanguageService();
exports.css = CSS.getCSSLanguageService();
exports.scss = CSS.getSCSSLanguageService();
exports.less = CSS.getLESSLanguageService();
exports.pug = Pug.getLanguageService(exports.html);
exports.postcss = {
    ...exports.scss,
    doValidation: (document, stylesheet, documentSettings) => {
        let errors = exports.scss.doValidation(document, stylesheet, documentSettings);
        errors = errors.filter(error => error.code !== 'css-semicolonexpected');
        errors = errors.filter(error => error.code !== 'css-ruleorselectorexpected');
        errors = errors.filter(error => error.code !== 'unknownAtRules');
        return errors;
    },
};
function getCssLanguageService(lang) {
    switch (lang) {
        case 'css': return exports.css;
        case 'scss': return exports.scss;
        case 'less': return exports.less;
        case 'postcss': return exports.postcss;
    }
}
exports.getCssLanguageService = getCssLanguageService;
// a cheap ts language service, only has one script
let tsScriptVersion = 0;
let tsScript;
let tsService;
function getCheapTsService(ts, code) {
    if (!tsService) {
        tsService = ts.createLanguageService({
            getCompilationSettings: () => ({}),
            getScriptFileNames: () => ['fake.ts'],
            getScriptVersion: () => tsScriptVersion.toString(),
            getScriptSnapshot: () => tsScript,
            getCurrentDirectory: () => '',
            getDefaultLibFileName: () => '',
        });
    }
    tsScriptVersion++;
    tsScript = ts.ScriptSnapshot.fromString(code);
    return {
        service: tsService,
        scriptName: 'fake.ts',
    };
}
exports.getCheapTsService = getCheapTsService;
let tsScriptVersion2 = 0;
let tsScript2;
let tsService2;
function getCheapTsService2(ts, doc) {
    if (!tsService2) {
        tsService2 = TS2.createLanguageService({
            getCompilationSettings: () => ({}),
            getScriptFileNames: () => [shared_1.uriToFsPath(shared_1.fsPathToUri('fake.ts'))],
            getScriptVersion: () => tsScriptVersion2.toString(),
            getScriptSnapshot: () => tsScript2,
            getCurrentDirectory: () => '',
            getDefaultLibFileName: () => '',
        }, ts);
    }
    tsScriptVersion2++;
    tsScript2 = ts.ScriptSnapshot.fromString(doc.getText());
    return {
        service: tsService2,
        uri: shared_1.fsPathToUri('fake.ts'),
    };
}
exports.getCheapTsService2 = getCheapTsService2;
//# sourceMappingURL=languageServices.js.map