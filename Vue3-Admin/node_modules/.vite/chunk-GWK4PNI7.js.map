{
  "version": 3,
  "sources": ["../crypto-js/enc-base64.js"],
  "sourcesContent": [";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              var bitsCombined = bits1 | bits2;\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));"],
  "mappings": ";;;;;;;;;;;AAAA;AAAC,EAAC,UAAU,MAAM,SAAS;AAC1B,QAAI,OAAO,YAAY,UAAU;AAEhC,aAAO,UAAU,UAAU,QAAQ;AAAA,eAE3B,OAAO,WAAW,cAAc,OAAO,KAAK;AAEpD,aAAO,CAAC,WAAW;AAAA,WAEf;AAEJ,cAAQ,KAAK;AAAA;AAAA,KAEb,SAAM,SAAU,UAAU;AAE3B,IAAC,YAAY;AAET,UAAI,IAAI;AACR,UAAI,QAAQ,EAAE;AACd,UAAI,YAAY,MAAM;AACtB,UAAI,QAAQ,EAAE;AAKd,UAAI,SAAS,MAAM,SAAS;AAAA,QAcxB,WAAW,SAAU,WAAW;AAE5B,cAAI,QAAQ,UAAU;AACtB,cAAI,WAAW,UAAU;AACzB,cAAI,MAAM,KAAK;AAGf,oBAAU;AAGV,cAAI,cAAc;AAClB,mBAAS,IAAI,GAAG,IAAI,UAAU,KAAK,GAAG;AAClC,gBAAI,QAAS,MAAM,MAAM,OAAc,KAAM,IAAI,IAAK,IAAY;AAClE,gBAAI,QAAS,MAAO,IAAI,MAAO,OAAQ,KAAO,KAAI,KAAK,IAAK,IAAM;AAClE,gBAAI,QAAS,MAAO,IAAI,MAAO,OAAQ,KAAO,KAAI,KAAK,IAAK,IAAM;AAElE,gBAAI,UAAW,SAAS,KAAO,SAAS,IAAK;AAE7C,qBAAS,IAAI,GAAI,IAAI,KAAO,IAAI,IAAI,OAAO,UAAW,KAAK;AACvD,0BAAY,KAAK,IAAI,OAAQ,YAAa,IAAK,KAAI,KAAO;AAAA;AAAA;AAKlE,cAAI,cAAc,IAAI,OAAO;AAC7B,cAAI,aAAa;AACb,mBAAO,YAAY,SAAS,GAAG;AAC3B,0BAAY,KAAK;AAAA;AAAA;AAIzB,iBAAO,YAAY,KAAK;AAAA;AAAA,QAgB5B,OAAO,SAAU,WAAW;AAExB,cAAI,kBAAkB,UAAU;AAChC,cAAI,MAAM,KAAK;AACf,cAAI,aAAa,KAAK;AAEtB,cAAI,CAAC,YAAY;AACT,yBAAa,KAAK,cAAc;AAChC,qBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,yBAAW,IAAI,WAAW,MAAM;AAAA;AAAA;AAK5C,cAAI,cAAc,IAAI,OAAO;AAC7B,cAAI,aAAa;AACb,gBAAI,eAAe,UAAU,QAAQ;AACrC,gBAAI,iBAAiB,IAAI;AACrB,gCAAkB;AAAA;AAAA;AAK1B,iBAAO,UAAU,WAAW,iBAAiB;AAAA;AAAA,QAIjD,MAAM;AAAA;AAGV,yBAAmB,WAAW,iBAAiB,YAAY;AACzD,YAAI,QAAQ;AACZ,YAAI,SAAS;AACb,iBAAS,IAAI,GAAG,IAAI,iBAAiB,KAAK;AACtC,cAAI,IAAI,GAAG;AACP,gBAAI,QAAQ,WAAW,UAAU,WAAW,IAAI,OAAS,IAAI,IAAK;AAClE,gBAAI,QAAQ,WAAW,UAAU,WAAW,QAAS,IAAK,IAAI,IAAK;AACnE,gBAAI,eAAe,QAAQ;AAC3B,kBAAM,WAAW,MAAM,gBAAiB,KAAM,SAAS,IAAK;AAC5D;AAAA;AAAA;AAGR,eAAO,UAAU,OAAO,OAAO;AAAA;AAZxB;AAAA;AAiBb,WAAO,SAAS,IAAI;AAAA;AAAA;",
  "names": []
}
