import {
  __name
} from "./chunk-I25YA5I3.js";
import {
  __commonJS
} from "./chunk-KHGO2BKN.js";

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS((exports, module) => {
  "use strict";
  module.exports = /* @__PURE__ */ __name(function bind(fn, thisArg) {
    return /* @__PURE__ */ __name(function wrap() {
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      return fn.apply(thisArg, args);
    }, "wrap");
  }, "bind");
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS((exports, module) => {
  "use strict";
  var bind = require_bind();
  var toString = Object.prototype.toString;
  function isArray(val) {
    return toString.call(val) === "[object Array]";
  }
  __name(isArray, "isArray");
  function isUndefined(val) {
    return typeof val === "undefined";
  }
  __name(isUndefined, "isUndefined");
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
  }
  __name(isBuffer, "isBuffer");
  function isArrayBuffer(val) {
    return toString.call(val) === "[object ArrayBuffer]";
  }
  __name(isArrayBuffer, "isArrayBuffer");
  function isFormData(val) {
    return typeof FormData !== "undefined" && val instanceof FormData;
  }
  __name(isFormData, "isFormData");
  function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && val.buffer instanceof ArrayBuffer;
    }
    return result;
  }
  __name(isArrayBufferView, "isArrayBufferView");
  function isString(val) {
    return typeof val === "string";
  }
  __name(isString, "isString");
  function isNumber(val) {
    return typeof val === "number";
  }
  __name(isNumber, "isNumber");
  function isObject(val) {
    return val !== null && typeof val === "object";
  }
  __name(isObject, "isObject");
  function isPlainObject(val) {
    if (toString.call(val) !== "[object Object]") {
      return false;
    }
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
  }
  __name(isPlainObject, "isPlainObject");
  function isDate(val) {
    return toString.call(val) === "[object Date]";
  }
  __name(isDate, "isDate");
  function isFile(val) {
    return toString.call(val) === "[object File]";
  }
  __name(isFile, "isFile");
  function isBlob(val) {
    return toString.call(val) === "[object Blob]";
  }
  __name(isBlob, "isBlob");
  function isFunction(val) {
    return toString.call(val) === "[object Function]";
  }
  __name(isFunction, "isFunction");
  function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
  }
  __name(isStream, "isStream");
  function isURLSearchParams(val) {
    return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
  }
  __name(isURLSearchParams, "isURLSearchParams");
  function trim(str) {
    return str.replace(/^\s*/, "").replace(/\s*$/, "");
  }
  __name(trim, "trim");
  function isStandardBrowserEnv() {
    if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
      return false;
    }
    return typeof window !== "undefined" && typeof document !== "undefined";
  }
  __name(isStandardBrowserEnv, "isStandardBrowserEnv");
  function forEach(obj, fn) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray(obj)) {
      for (var i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn.call(null, obj[key], key, obj);
        }
      }
    }
  }
  __name(forEach, "forEach");
  function merge() {
    var result = {};
    function assignValue(val, key) {
      if (isPlainObject(result[key]) && isPlainObject(val)) {
        result[key] = merge(result[key], val);
      } else if (isPlainObject(val)) {
        result[key] = merge({}, val);
      } else if (isArray(val)) {
        result[key] = val.slice();
      } else {
        result[key] = val;
      }
    }
    __name(assignValue, "assignValue");
    for (var i = 0, l = arguments.length; i < l; i++) {
      forEach(arguments[i], assignValue);
    }
    return result;
  }
  __name(merge, "merge");
  function extend(a, b, thisArg) {
    forEach(b, /* @__PURE__ */ __name(function assignValue(val, key) {
      if (thisArg && typeof val === "function") {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    }, "assignValue"));
    return a;
  }
  __name(extend, "extend");
  function stripBOM(content) {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  }
  __name(stripBOM, "stripBOM");
  module.exports = {
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber,
    isObject,
    isPlainObject,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isFunction,
    isStream,
    isURLSearchParams,
    isStandardBrowserEnv,
    forEach,
    merge,
    extend,
    trim,
    stripBOM
  };
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  __name(encode, "encode");
  module.exports = /* @__PURE__ */ __name(function buildURL(url, params, paramsSerializer) {
    if (!params) {
      return url;
    }
    var serializedParams;
    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (utils.isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];
      utils.forEach(params, /* @__PURE__ */ __name(function serialize(val, key) {
        if (val === null || typeof val === "undefined") {
          return;
        }
        if (utils.isArray(val)) {
          key = key + "[]";
        } else {
          val = [val];
        }
        utils.forEach(val, /* @__PURE__ */ __name(function parseValue(v) {
          if (utils.isDate(v)) {
            v = v.toISOString();
          } else if (utils.isObject(v)) {
            v = JSON.stringify(v);
          }
          parts.push(encode(key) + "=" + encode(v));
        }, "parseValue"));
      }, "serialize"));
      serializedParams = parts.join("&");
    }
    if (serializedParams) {
      var hashmarkIndex = url.indexOf("#");
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
  }, "buildURL");
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  function InterceptorManager() {
    this.handlers = [];
  }
  __name(InterceptorManager, "InterceptorManager");
  InterceptorManager.prototype.use = /* @__PURE__ */ __name(function use(fulfilled, rejected) {
    this.handlers.push({
      fulfilled,
      rejected
    });
    return this.handlers.length - 1;
  }, "use");
  InterceptorManager.prototype.eject = /* @__PURE__ */ __name(function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }, "eject");
  InterceptorManager.prototype.forEach = /* @__PURE__ */ __name(function forEach(fn) {
    utils.forEach(this.handlers, /* @__PURE__ */ __name(function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    }, "forEachHandler"));
  }, "forEach");
  module.exports = InterceptorManager;
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  module.exports = /* @__PURE__ */ __name(function transformData(data, headers, fns) {
    utils.forEach(fns, /* @__PURE__ */ __name(function transform(fn) {
      data = fn(data, headers);
    }, "transform"));
    return data;
  }, "transformData");
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS((exports, module) => {
  "use strict";
  module.exports = /* @__PURE__ */ __name(function isCancel(value) {
    return !!(value && value.__CANCEL__);
  }, "isCancel");
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  module.exports = /* @__PURE__ */ __name(function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, /* @__PURE__ */ __name(function processHeader(value, name) {
      if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
        headers[normalizedName] = value;
        delete headers[name];
      }
    }, "processHeader"));
  }, "normalizeHeaderName");
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS((exports, module) => {
  "use strict";
  module.exports = /* @__PURE__ */ __name(function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) {
      error.code = code;
    }
    error.request = request;
    error.response = response;
    error.isAxiosError = true;
    error.toJSON = /* @__PURE__ */ __name(function toJSON() {
      return {
        message: this.message,
        name: this.name,
        description: this.description,
        number: this.number,
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        config: this.config,
        code: this.code
      };
    }, "toJSON");
    return error;
  }, "enhanceError");
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS((exports, module) => {
  "use strict";
  var enhanceError = require_enhanceError();
  module.exports = /* @__PURE__ */ __name(function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
  }, "createError");
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS((exports, module) => {
  "use strict";
  var createError = require_createError();
  module.exports = /* @__PURE__ */ __name(function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
    }
  }, "settle");
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  module.exports = utils.isStandardBrowserEnv() ? (/* @__PURE__ */ __name(function standardBrowserEnv() {
    return {
      write: /* @__PURE__ */ __name(function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + "=" + encodeURIComponent(value));
        if (utils.isNumber(expires)) {
          cookie.push("expires=" + new Date(expires).toGMTString());
        }
        if (utils.isString(path)) {
          cookie.push("path=" + path);
        }
        if (utils.isString(domain)) {
          cookie.push("domain=" + domain);
        }
        if (secure === true) {
          cookie.push("secure");
        }
        document.cookie = cookie.join("; ");
      }, "write"),
      read: /* @__PURE__ */ __name(function read(name) {
        var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
        return match ? decodeURIComponent(match[3]) : null;
      }, "read"),
      remove: /* @__PURE__ */ __name(function remove(name) {
        this.write(name, "", Date.now() - 864e5);
      }, "remove")
    };
  }, "standardBrowserEnv"))() : (/* @__PURE__ */ __name(function nonStandardBrowserEnv() {
    return {
      write: /* @__PURE__ */ __name(function write() {
      }, "write"),
      read: /* @__PURE__ */ __name(function read() {
        return null;
      }, "read"),
      remove: /* @__PURE__ */ __name(function remove() {
      }, "remove")
    };
  }, "nonStandardBrowserEnv"))();
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS((exports, module) => {
  "use strict";
  module.exports = /* @__PURE__ */ __name(function isAbsoluteURL(url) {
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
  }, "isAbsoluteURL");
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS((exports, module) => {
  "use strict";
  module.exports = /* @__PURE__ */ __name(function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }, "combineURLs");
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS((exports, module) => {
  "use strict";
  var isAbsoluteURL = require_isAbsoluteURL();
  var combineURLs = require_combineURLs();
  module.exports = /* @__PURE__ */ __name(function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }, "buildFullPath");
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ];
  module.exports = /* @__PURE__ */ __name(function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;
    if (!headers) {
      return parsed;
    }
    utils.forEach(headers.split("\n"), /* @__PURE__ */ __name(function parser(line) {
      i = line.indexOf(":");
      key = utils.trim(line.substr(0, i)).toLowerCase();
      val = utils.trim(line.substr(i + 1));
      if (key) {
        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
          return;
        }
        if (key === "set-cookie") {
          parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      }
    }, "parser"));
    return parsed;
  }, "parseHeaders");
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  module.exports = utils.isStandardBrowserEnv() ? (/* @__PURE__ */ __name(function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement("a");
    var originURL;
    function resolveURL(url) {
      var href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    __name(resolveURL, "resolveURL");
    originURL = resolveURL(window.location.href);
    return /* @__PURE__ */ __name(function isURLSameOrigin(requestURL) {
      var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    }, "isURLSameOrigin");
  }, "standardBrowserEnv"))() : (/* @__PURE__ */ __name(function nonStandardBrowserEnv() {
    return /* @__PURE__ */ __name(function isURLSameOrigin() {
      return true;
    }, "isURLSameOrigin");
  }, "nonStandardBrowserEnv"))();
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  var settle = require_settle();
  var cookies = require_cookies();
  var buildURL = require_buildURL();
  var buildFullPath = require_buildFullPath();
  var parseHeaders = require_parseHeaders();
  var isURLSameOrigin = require_isURLSameOrigin();
  var createError = require_createError();
  module.exports = /* @__PURE__ */ __name(function xhrAdapter(config) {
    return new Promise(/* @__PURE__ */ __name(function dispatchXhrRequest(resolve, reject) {
      var requestData = config.data;
      var requestHeaders = config.headers;
      if (utils.isFormData(requestData)) {
        delete requestHeaders["Content-Type"];
      }
      var request = new XMLHttpRequest();
      if (config.auth) {
        var username = config.auth.username || "";
        var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
        requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
      }
      var fullPath = buildFullPath(config.baseURL, config.url);
      request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
      request.timeout = config.timeout;
      request.onreadystatechange = /* @__PURE__ */ __name(function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
        var responseData = !config.responseType || config.responseType === "text" ? request.responseText : request.response;
        var response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request
        };
        settle(resolve, reject, response);
        request = null;
      }, "handleLoad");
      request.onabort = /* @__PURE__ */ __name(function handleAbort() {
        if (!request) {
          return;
        }
        reject(createError("Request aborted", config, "ECONNABORTED", request));
        request = null;
      }, "handleAbort");
      request.onerror = /* @__PURE__ */ __name(function handleError() {
        reject(createError("Network Error", config, null, request));
        request = null;
      }, "handleError");
      request.ontimeout = /* @__PURE__ */ __name(function handleTimeout() {
        var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(createError(timeoutErrorMessage, config, "ECONNABORTED", request));
        request = null;
      }, "handleTimeout");
      if (utils.isStandardBrowserEnv()) {
        var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
        if (xsrfValue) {
          requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
      }
      if ("setRequestHeader" in request) {
        utils.forEach(requestHeaders, /* @__PURE__ */ __name(function setRequestHeader(val, key) {
          if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
            delete requestHeaders[key];
          } else {
            request.setRequestHeader(key, val);
          }
        }, "setRequestHeader"));
      }
      if (!utils.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }
      if (config.responseType) {
        try {
          request.responseType = config.responseType;
        } catch (e) {
          if (config.responseType !== "json") {
            throw e;
          }
        }
      }
      if (typeof config.onDownloadProgress === "function") {
        request.addEventListener("progress", config.onDownloadProgress);
      }
      if (typeof config.onUploadProgress === "function" && request.upload) {
        request.upload.addEventListener("progress", config.onUploadProgress);
      }
      if (config.cancelToken) {
        config.cancelToken.promise.then(/* @__PURE__ */ __name(function onCanceled(cancel) {
          if (!request) {
            return;
          }
          request.abort();
          reject(cancel);
          request = null;
        }, "onCanceled"));
      }
      if (!requestData) {
        requestData = null;
      }
      request.send(requestData);
    }, "dispatchXhrRequest"));
  }, "xhrAdapter");
});

// node_modules/axios/lib/defaults.js
var require_defaults = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  var normalizeHeaderName = require_normalizeHeaderName();
  var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
  };
  function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
      headers["Content-Type"] = value;
    }
  }
  __name(setContentTypeIfUnset, "setContentTypeIfUnset");
  function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") {
      adapter = require_xhr();
    } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
      adapter = require_xhr();
    }
    return adapter;
  }
  __name(getDefaultAdapter, "getDefaultAdapter");
  var defaults = {
    adapter: getDefaultAdapter(),
    transformRequest: [/* @__PURE__ */ __name(function transformRequest(data, headers) {
      normalizeHeaderName(headers, "Accept");
      normalizeHeaderName(headers, "Content-Type");
      if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
        return data;
      }
      if (utils.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils.isURLSearchParams(data)) {
        setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
        return data.toString();
      }
      if (utils.isObject(data)) {
        setContentTypeIfUnset(headers, "application/json;charset=utf-8");
        return JSON.stringify(data);
      }
      return data;
    }, "transformRequest")],
    transformResponse: [/* @__PURE__ */ __name(function transformResponse(data) {
      if (typeof data === "string") {
        try {
          data = JSON.parse(data);
        } catch (e) {
        }
      }
      return data;
    }, "transformResponse")],
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: /* @__PURE__ */ __name(function validateStatus(status) {
      return status >= 200 && status < 300;
    }, "validateStatus")
  };
  defaults.headers = {
    common: {
      Accept: "application/json, text/plain, */*"
    }
  };
  utils.forEach(["delete", "get", "head"], /* @__PURE__ */ __name(function forEachMethodNoData(method) {
    defaults.headers[method] = {};
  }, "forEachMethodNoData"));
  utils.forEach(["post", "put", "patch"], /* @__PURE__ */ __name(function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
  }, "forEachMethodWithData"));
  module.exports = defaults;
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  var transformData = require_transformData();
  var isCancel = require_isCancel();
  var defaults = require_defaults();
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
  }
  __name(throwIfCancellationRequested, "throwIfCancellationRequested");
  module.exports = /* @__PURE__ */ __name(function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = config.headers || {};
    config.data = transformData(config.data, config.headers, config.transformRequest);
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], /* @__PURE__ */ __name(function cleanHeaderConfig(method) {
      delete config.headers[method];
    }, "cleanHeaderConfig"));
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(/* @__PURE__ */ __name(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData(response.data, response.headers, config.transformResponse);
      return response;
    }, "onAdapterResolution"), /* @__PURE__ */ __name(function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
        if (reason && reason.response) {
          reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
        }
      }
      return Promise.reject(reason);
    }, "onAdapterRejection"));
  }, "dispatchRequest");
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  module.exports = /* @__PURE__ */ __name(function mergeConfig(config1, config2) {
    config2 = config2 || {};
    var config = {};
    var valueFromConfig2Keys = ["url", "method", "data"];
    var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
    var defaultToConfig2Keys = [
      "baseURL",
      "transformRequest",
      "transformResponse",
      "paramsSerializer",
      "timeout",
      "timeoutMessage",
      "withCredentials",
      "adapter",
      "responseType",
      "xsrfCookieName",
      "xsrfHeaderName",
      "onUploadProgress",
      "onDownloadProgress",
      "decompress",
      "maxContentLength",
      "maxBodyLength",
      "maxRedirects",
      "transport",
      "httpAgent",
      "httpsAgent",
      "cancelToken",
      "socketPath",
      "responseEncoding"
    ];
    var directMergeKeys = ["validateStatus"];
    function getMergedValue(target, source) {
      if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
        return utils.merge(target, source);
      } else if (utils.isPlainObject(source)) {
        return utils.merge({}, source);
      } else if (utils.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    __name(getMergedValue, "getMergedValue");
    function mergeDeepProperties(prop) {
      if (!utils.isUndefined(config2[prop])) {
        config[prop] = getMergedValue(config1[prop], config2[prop]);
      } else if (!utils.isUndefined(config1[prop])) {
        config[prop] = getMergedValue(void 0, config1[prop]);
      }
    }
    __name(mergeDeepProperties, "mergeDeepProperties");
    utils.forEach(valueFromConfig2Keys, /* @__PURE__ */ __name(function valueFromConfig2(prop) {
      if (!utils.isUndefined(config2[prop])) {
        config[prop] = getMergedValue(void 0, config2[prop]);
      }
    }, "valueFromConfig2"));
    utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
    utils.forEach(defaultToConfig2Keys, /* @__PURE__ */ __name(function defaultToConfig2(prop) {
      if (!utils.isUndefined(config2[prop])) {
        config[prop] = getMergedValue(void 0, config2[prop]);
      } else if (!utils.isUndefined(config1[prop])) {
        config[prop] = getMergedValue(void 0, config1[prop]);
      }
    }, "defaultToConfig2"));
    utils.forEach(directMergeKeys, /* @__PURE__ */ __name(function merge(prop) {
      if (prop in config2) {
        config[prop] = getMergedValue(config1[prop], config2[prop]);
      } else if (prop in config1) {
        config[prop] = getMergedValue(void 0, config1[prop]);
      }
    }, "merge"));
    var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
    var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(/* @__PURE__ */ __name(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    }, "filterAxiosKeys"));
    utils.forEach(otherKeys, mergeDeepProperties);
    return config;
  }, "mergeConfig");
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  var buildURL = require_buildURL();
  var InterceptorManager = require_InterceptorManager();
  var dispatchRequest = require_dispatchRequest();
  var mergeConfig = require_mergeConfig();
  function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }
  __name(Axios, "Axios");
  Axios.prototype.request = /* @__PURE__ */ __name(function request(config) {
    if (typeof config === "string") {
      config = arguments[1] || {};
      config.url = arguments[0];
    } else {
      config = config || {};
    }
    config = mergeConfig(this.defaults, config);
    if (config.method) {
      config.method = config.method.toLowerCase();
    } else if (this.defaults.method) {
      config.method = this.defaults.method.toLowerCase();
    } else {
      config.method = "get";
    }
    var chain = [dispatchRequest, void 0];
    var promise = Promise.resolve(config);
    this.interceptors.request.forEach(/* @__PURE__ */ __name(function unshiftRequestInterceptors(interceptor) {
      chain.unshift(interceptor.fulfilled, interceptor.rejected);
    }, "unshiftRequestInterceptors"));
    this.interceptors.response.forEach(/* @__PURE__ */ __name(function pushResponseInterceptors(interceptor) {
      chain.push(interceptor.fulfilled, interceptor.rejected);
    }, "pushResponseInterceptors"));
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }
    return promise;
  }, "request");
  Axios.prototype.getUri = /* @__PURE__ */ __name(function getUri(config) {
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
  }, "getUri");
  utils.forEach(["delete", "get", "head", "options"], /* @__PURE__ */ __name(function forEachMethodNoData(method) {
    Axios.prototype[method] = function(url, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        url,
        data: (config || {}).data
      }));
    };
  }, "forEachMethodNoData"));
  utils.forEach(["post", "put", "patch"], /* @__PURE__ */ __name(function forEachMethodWithData(method) {
    Axios.prototype[method] = function(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        url,
        data
      }));
    };
  }, "forEachMethodWithData"));
  module.exports = Axios;
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS((exports, module) => {
  "use strict";
  function Cancel(message) {
    this.message = message;
  }
  __name(Cancel, "Cancel");
  Cancel.prototype.toString = /* @__PURE__ */ __name(function toString() {
    return "Cancel" + (this.message ? ": " + this.message : "");
  }, "toString");
  Cancel.prototype.__CANCEL__ = true;
  module.exports = Cancel;
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS((exports, module) => {
  "use strict";
  var Cancel = require_Cancel();
  function CancelToken(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    var resolvePromise;
    this.promise = new Promise(/* @__PURE__ */ __name(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    }, "promiseExecutor"));
    var token = this;
    executor(/* @__PURE__ */ __name(function cancel(message) {
      if (token.reason) {
        return;
      }
      token.reason = new Cancel(message);
      resolvePromise(token.reason);
    }, "cancel"));
  }
  __name(CancelToken, "CancelToken");
  CancelToken.prototype.throwIfRequested = /* @__PURE__ */ __name(function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }, "throwIfRequested");
  CancelToken.source = /* @__PURE__ */ __name(function source() {
    var cancel;
    var token = new CancelToken(/* @__PURE__ */ __name(function executor(c) {
      cancel = c;
    }, "executor"));
    return {
      token,
      cancel
    };
  }, "source");
  module.exports = CancelToken;
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS((exports, module) => {
  "use strict";
  module.exports = /* @__PURE__ */ __name(function spread(callback) {
    return /* @__PURE__ */ __name(function wrap(arr) {
      return callback.apply(null, arr);
    }, "wrap");
  }, "spread");
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS((exports, module) => {
  "use strict";
  module.exports = /* @__PURE__ */ __name(function isAxiosError(payload) {
    return typeof payload === "object" && payload.isAxiosError === true;
  }, "isAxiosError");
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS((exports, module) => {
  "use strict";
  var utils = require_utils();
  var bind = require_bind();
  var Axios = require_Axios();
  var mergeConfig = require_mergeConfig();
  var defaults = require_defaults();
  function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    utils.extend(instance, Axios.prototype, context);
    utils.extend(instance, context);
    return instance;
  }
  __name(createInstance, "createInstance");
  var axios = createInstance(defaults);
  axios.Axios = Axios;
  axios.create = /* @__PURE__ */ __name(function create(instanceConfig) {
    return createInstance(mergeConfig(axios.defaults, instanceConfig));
  }, "create");
  axios.Cancel = require_Cancel();
  axios.CancelToken = require_CancelToken();
  axios.isCancel = require_isCancel();
  axios.all = /* @__PURE__ */ __name(function all(promises) {
    return Promise.all(promises);
  }, "all");
  axios.spread = require_spread();
  axios.isAxiosError = require_isAxiosError();
  module.exports = axios;
  module.exports.default = axios;
});

// node_modules/axios/index.js
var require_axios2 = __commonJS((exports, module) => {
  module.exports = require_axios();
});

// dep:axios
var axios_default = require_axios2();
export {
  axios_default as default
};
//# sourceMappingURL=axios.js.map
