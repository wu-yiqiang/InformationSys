import {
  doWatch,
  hasChanged,
  isFunction,
  isObject,
  isRef,
  reactive,
  toRaw,
  track,
  trigger
} from "./chunk-RLAZP54J.js";
import {
  __name
} from "./chunk-I25YA5I3.js";

// node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var convert = /* @__PURE__ */ __name((val) => isObject(val) ? reactive(val) : val, "convert");
function ref(value) {
  return createRef(value);
}
__name(ref, "ref");
function shallowRef(value) {
  return createRef(value, true);
}
__name(shallowRef, "shallowRef");
var RefImpl = class {
  constructor(_rawValue, _shallow = false) {
    this._rawValue = _rawValue;
    this._shallow = _shallow;
    this.__v_isRef = true;
    this._value = _shallow ? _rawValue : convert(_rawValue);
  }
  get value() {
    track(toRaw(this), "get", "value");
    return this._value;
  }
  set value(newVal) {
    if (hasChanged(toRaw(newVal), this._rawValue)) {
      this._rawValue = newVal;
      this._value = this._shallow ? newVal : convert(newVal);
      trigger(toRaw(this), "set", "value", newVal);
    }
  }
};
__name(RefImpl, "RefImpl");
function createRef(rawValue, shallow = false) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
__name(createRef, "createRef");

// node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
function watchEffect(effect, options) {
  return doWatch(effect, null, options);
}
__name(watchEffect, "watchEffect");
function defineComponent(options) {
  return isFunction(options) ? {setup: options, name: options.name} : options;
}
__name(defineComponent, "defineComponent");

export {
  ref,
  shallowRef,
  watchEffect,
  defineComponent
};
//# sourceMappingURL=chunk-IBDNUA5N.js.map
